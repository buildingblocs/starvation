{
    "level_1": {
        "title": "Learning the Game - The Basics",
        "description": "Mario hates Luigi, and wants to attack him. He will send a clone of himself every few seconds but he needs your help training them. With the distributePoints function, help him decide how to train each Mario clone",
        "prepend": "",
        "append": "def decideAction(self):\n    attackable = enemiesWithinRange(self)\n    if (len(attackable) != 0): self.attack(attackable[0])\n    else: self.move(1)",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n"
    },
    "level_2": {
        "title": "Learning the Game - enemiesWithinRange, decideAction",
        "description": "Now, Mario is super lazy. He wants you to help him command his clone army. With the decideAction and enemiesWithinRange function, help him command his clones.",
        "prepend": "from gameAPI import enemiesWithinRange",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Mario is too lazy, help him code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_3": {
        "title": "Luigi Fights Back",
        "description": "Luigi has had enough of Mario, he will be launching his own clone army at Mario. Help Mario win!",
        "prepend": "from gameAPI import enemiesWithinRange",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_4": {
        "title": "Gathering the Army",
        "description": "Luigi is getting smarter, he is sending groups of his clones at once. With the getFriendlyTroops and distanceToEntity function, help Mario win!",
        "prepend": "from gameAPI import enemiesWithinRange, getFriendlyTroops, distanceToEntity",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    # distanceToEntity - Returns the distance between the 2 entities\n    #  1 represents Mario's base\n    # -1 represents Luigi's base\n    dist = distanceToEntity(self, 1)\n    dist = distanceToEntity(self, enemies[0])\n\n    # A list of the Mario clones\n    # Each friendly also has position and health\n    # Accessed by friendlies[0].position and friendlies[0].health for the first friendly\n    friendlies = getFriendlyTroops(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_5": {
        "title": "Gathering the Army (Hard Version)",
        "description": "Luigi is getting smarter, he is sending groups of his clones at once. However, Mario isn't, removing access to the getFriendlyTroops and distanceToEntity function. Help Mario win!",
        "prepend": "from gameAPI import enemiesWithinRange",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Oh noes, you do not have the new functions from before.\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_6": {
        "title": "Defend the Snipers",
        "description": "Luigi is preparing a bunch of long range snipers to target his base. Mario is not going to take this lying down. Help him win!",
        "prepend": "from gameAPI import enemiesWithinRange, getFriendlyTroops, distanceToEntity",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    # distanceToEntity - Returns the distance between the 2 entities\n    #  1 represents Mario's base\n    # -1 represents Luigi's base\n    dist = distanceToEntity(self, 1)\n    dist = distanceToEntity(self, enemies[0])\n\n    # A list of the Mario clones\n    # Each friendly also has position and health\n    # Accessed by friendlies[0].position and friendlies[0].health for the first friendly\n    friendlies = getFriendlyTroops(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_7": {
        "title": "Defend the Snipers (Hard Version)",
        "description": "After losing to Mario, Luigi changes his long range snipers to target the Mario clones first. Help Mario win!",
        "prepend": "from gameAPI import enemiesWithinRange, getFriendlyTroops, distanceToEntity",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    # distanceToEntity - Returns the distance between the 2 entities\n    #  1 represents Mario's base\n    # -1 represents Luigi's base\n    dist = distanceToEntity(self, 1)\n    dist = distanceToEntity(self, enemies[0])\n\n    # A list of the Mario clones\n    # Each friendly also has position and health\n    # Accessed by friendlies[0].position and friendlies[0].health for the first friendly\n    friendlies = getFriendlyTroops(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_8": {
        "title": "Glass Cannons",
        "description": "Luigi is making some glass cannons. Show Luigi why glass cannons are fragile!",
        "prepend": "from gameAPI import enemiesWithinRange, getFriendlyTroops, distanceToEntity",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    # distanceToEntity - Returns the distance between the 2 entities\n    #  1 represents Mario's base\n    # -1 represents Luigi's base\n    dist = distanceToEntity(self, 1)\n    dist = distanceToEntity(self, enemies[0])\n\n    # A list of the Mario clones\n    # Each friendly also has position and health\n    # Accessed by friendlies[0].position and friendlies[0].health for the first friendly\n    friendlies = getFriendlyTroops(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    },
    "level_9": {
        "title": "Sustenance",
        "description": "Luigi gave his clones some weird pills, now they can heal. Help Mario defeat these mutants!",
        "prepend": "from gameAPI import enemiesWithinRange, getFriendlyTroops, distanceToEntity",
        "append": "",
        "template": "def distributeSkill(skill_points):\n    '''\n    Mario's Clones have 4 main properties:\n        - Health\n        - Damage\n        - Range\n        - Speed\n        \n    Skill points increase as the game goes on!\n    You start with 4 and gain more as Luigi fights on!\n    '''\n    health = 0\n    damage = 0\n    range = 0\n    speed = 0\n    return [health, damage, range, speed]\n\n\ndef decideAction(self):\n    '''\n    Code out what the clones will do!\n\n    self - the clone to consider\n    \n    self has values you might want to use\n    - health = self.health\n    - position = self.position\n    '''\n\n    # Returns a list of enemies in the range of the current troop\n    # Enemies also have the values above!\n    enemies = enemiesWithinRange(self)\n\n    # distanceToEntity - Returns the distance between the 2 entities\n    #  1 represents Mario's base\n    # -1 represents Luigi's base\n    dist = distanceToEntity(self, 1)\n    dist = distanceToEntity(self, enemies[0])\n\n    # A list of the Mario clones\n    # Each friendly also has position and health\n    # Accessed by friendlies[0].position and friendlies[0].health for the first friendly\n    friendlies = getFriendlyTroops(self)\n\n    #######################################################\n    # To attack, pass in one of the enemies you found above\n    # self.attack(enemies[0])\n\n    # To move, pass in the direction you want to move in\n    # self.move( 1) - Towards the enemy\n    # self.move(-1) - Away from the enemy [Towards your own base]\n    # self.move( 0) - Stay still\n\n    # You can only call attack/move once this function\n    # If you are attacking, you will not move until you call the move function again"
    }
}
